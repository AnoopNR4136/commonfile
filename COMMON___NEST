////////////////////////////////New Pjct
nest new pjct_name

/////////////////TypeOrm
npm i --save @nestjs/typeorm typeorm pg









////////////////////////////////////////Vallidation 

npm install class-validator --save
npm install class-transformer --save


???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????UUID
npm i uuid
import { v4 as uuidv4 } from 'uuid';
const oder_id = uuidv4();


//////////Config
import { TypeOrmModuleOptions } from '@nestjs/typeorm';

export const typeOrmConfig: TypeOrmModuleOptions = {
  type: 'postgres',
  host: 'localhost',
  port: 5432,
  username: 'postgres',
  password: 'postgres',
  database: 'db_ecart',
  entities: [__dirname + '/..**/*.entity.ts'],
  synchronize: true,
  autoLoadEntities: true,
  logging: true,
};








/////////////////ALreday Exist

???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

catch (err) {
            console.log(err)
            if (err.code === "23505") {
                throw new ConflictException('Category is already Exist !!!')
            }
            else {

                throw new InternalServerErrorException();
            }

            console.log(err)



/////////////////HashPassword
async hashPassword(password:string,salt:string) :Promise<string>{
        const hash = await bcrypt.hash(password,salt)
        console.log("Hash "+hash);
        return hash
    }


???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
?????????????????????????JWT STRATEGY

import { Injectable, UnauthorizedException } from "@nestjs/common";
import { PassportStrategy } from "@nestjs/passport";
import { InjectRepository } from "@nestjs/typeorm";
import { UserRepository } from "./user.repository";
import { Strategy,ExtractJwt } from 'passport-jwt'
import { User } from "./entities/user.entity";
import { JwtPayload } from "src/user/jwt-paylod.interface";

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy){
    constructor(
@InjectRepository(UserRepository)
private userRepository:UserRepository,
    ){
        super({
            jwtFromRequest :ExtractJwt.fromAuthHeaderAsBearerToken(),
            secretOrKey:'topSecret51' ,  
        });
    }

    async validate(payload :JwtPayload) :Promise<User>{
        
        const { name } = payload;

        console.log("Name "+name);

        const findUser = await this.userRepository.findOne({name})
        // console.log(findUser.name);

        console.log("Atuthvalidation "+findUser)

        if(!findUser){
            throw new UnauthorizedException()
        }
        return findUser;
    }
}





???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????GET USER DECORATOR
import { createParamDecorator, ExecutionContext } from "@nestjs/common";
import { User } from "src/user/entities/user.entity";


 export  const GetUser = createParamDecorator((data, ctx: ExecutionContext): User => {
    const req =  ctx.switchToHttp().getRequest();
    return req.user;
});


//////////////////////////////////////Swagger

 npm install --save @nestjs/swagger swagger-ui-express


app.useGlobalPipes(new ValidationPipe());
  const config = new DocumentBuilder()
    .setTitle('Eastern-Market-Portal')
    .setDescription('')
    .setVersion('1.0')
    .addTag('')
    .addBearerAuth()
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document);


??????????????????????????????serve static
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as express from 'express';
import { join } from 'path';
async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);

  app.use(
    '/imagecategory',
    express.static(join(__dirname, '..', 'imagecategory')),
  );
  app.use(
    '/imagesubcategory',
    express.static(join(__dirname, '..', 'imagesubcategory')),
  );
  app.use(
    '/imageproduct',
    express.static(join(__dirname, '..', 'imageproduct')),
  );
  app.enableCors();
  await app.listen(3000);
}
bootstrap();

